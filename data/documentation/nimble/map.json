{
  "abstract" : [
    {
      "text" : "Sometimes, you only want to match against a property or group of properties.",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "text" : "For example, if you wanted to check that only one or a few properties of a value",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "text" : "are equal to something else. For this, use the ",
      "type" : "text"
    },
    {
      "code" : "map",
      "type" : "codeVoice"
    },
    {
      "text" : " matcher to convert a value",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "text" : "to another value and check it with a matcher.",
      "type" : "text"
    }
  ],
  "hierarchy" : {
    "paths" : [
      [
        "doc:\/\/Nimble\/documentation\/Nimble"
      ]
    ]
  },
  "identifier" : {
    "interfaceLanguage" : "swift",
    "url" : "doc:\/\/Nimble\/documentation\/Nimble\/Map"
  },
  "kind" : "article",
  "metadata" : {
    "modules" : [
      {
        "name" : "Nimble"
      }
    ],
    "role" : "article",
    "roleHeading" : "Article",
    "title" : "Mapping a Value to Another Value"
  },
  "primaryContentSections" : [
    {
      "content" : [
        {
          "anchor" : "overview",
          "level" : 2,
          "text" : "Overview",
          "type" : "heading"
        },
        {
          "code" : [
            "\/\/ Swift",
            "",
            "expect(someValue).to(map(\\.someProperty, equal(expectedProperty)))",
            "",
            "\/\/ or, for checking multiple different properties:",
            "",
            "expect(someValue).to(satisfyAllOf(",
            "    map(\\.firstProperty, equal(expectedFirstProperty)),",
            "    map({ $0.secondProperty }, equal(expectedSecondProperty))",
            "))"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "The ",
              "type" : "text"
            },
            {
              "code" : "map",
              "type" : "codeVoice"
            },
            {
              "text" : " matcher takes in either a closure or a keypath literal, and a matcher",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to compose with. It also works with async closures and async matchers.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "In most cases, it is simpler and easier to not use map (that is, prefer",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "code" : "expect(someValue.property).to(equal(1))",
              "type" : "codeVoice"
            },
            {
              "text" : " to",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "code" : "expect(someValue).to(map(\\.property, equal(1)))",
              "type" : "codeVoice"
            },
            {
              "text" : "). But ",
              "type" : "text"
            },
            {
              "code" : "map",
              "type" : "codeVoice"
            },
            {
              "text" : " is incredibly",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "useful when combined with ",
              "type" : "text"
            },
            {
              "code" : "satisfyAllOf",
              "type" : "codeVoice"
            },
            {
              "text" : "\/",
              "type" : "text"
            },
            {
              "code" : "satisfyAnyOf",
              "type" : "codeVoice"
            },
            {
              "text" : ", especially for checking",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "a value that cannot conform to ",
              "type" : "text"
            },
            {
              "code" : "Equatable",
              "type" : "codeVoice"
            },
            {
              "text" : " (or you donâ€™t want to make it",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "conform to ",
              "type" : "text"
            },
            {
              "code" : "Equatable",
              "type" : "codeVoice"
            },
            {
              "text" : "). However, if you find yourself reusing ",
              "type" : "text"
            },
            {
              "code" : "map",
              "type" : "codeVoice"
            },
            {
              "text" : " many times",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to do a fuzzy-equals of a given type, you will find writing a custom matcher to",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "be much easier to use and maintain.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "When using Polling Expectations be careful not run process intensive",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "code since the map closure will be ran many times.",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Warning",
          "style" : "warning",
          "type" : "aside"
        }
      ],
      "kind" : "content"
    }
  ],
  "schemaVersion" : {
    "major" : 0,
    "minor" : 3,
    "patch" : 0
  },
  "sections" : [

  ],
  "seeAlsoSections" : [
    {
      "generated" : true,
      "identifiers" : [
        "doc:\/\/Nimble\/documentation\/Nimble\/TypeChecking",
        "doc:\/\/Nimble\/documentation\/Nimble\/Equivalence",
        "doc:\/\/Nimble\/documentation\/Nimble\/Identity",
        "doc:\/\/Nimble\/documentation\/Nimble\/Comparisons",
        "doc:\/\/Nimble\/documentation\/Nimble\/Truthiness",
        "doc:\/\/Nimble\/documentation\/Nimble\/SwiftAssertions",
        "doc:\/\/Nimble\/documentation\/Nimble\/SwiftErrors",
        "doc:\/\/Nimble\/documentation\/Nimble\/Exceptions",
        "doc:\/\/Nimble\/documentation\/Nimble\/Strings",
        "doc:\/\/Nimble\/documentation\/Nimble\/Notifications",
        "doc:\/\/Nimble\/documentation\/Nimble\/Result",
        "doc:\/\/Nimble\/documentation\/Nimble\/GroupsOfMatchers",
        "doc:\/\/Nimble\/documentation\/Nimble\/CustomValidation",
        "doc:\/\/Nimble\/documentation\/Nimble\/CollectionMembership",
        "doc:\/\/Nimble\/documentation\/Nimble\/CollectionElements",
        "doc:\/\/Nimble\/documentation\/Nimble\/CollectionCount"
      ],
      "title" : "Matchers"
    }
  ],
  "variants" : [
    {
      "paths" : [
        "\/documentation\/nimble\/map"
      ],
      "traits" : [
        {
          "interfaceLanguage" : "swift"
        }
      ]
    }
  ]
, 
"references": {
"doc://Nimble/documentation/Nimble": {
  "abstract" : [
    {
      "inlineContent" : [
        {
          "text" : "Nimble",
          "type" : "text"
        }
      ],
      "type" : "strong"
    },
    {
      "text" : " is a testing framework for verifying the outcomes and Swift or Objective-C expressions.",
      "type" : "text"
    }
  ],
  "identifier" : "doc:\/\/Nimble\/documentation\/Nimble",
  "kind" : "symbol",
  "role" : "collection",
  "title" : "Nimble",
  "type" : "topic",
  "url" : "\/documentation\/nimble"
},
"doc://Nimble/documentation/Nimble/CollectionCount": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/Nimble\/documentation\/Nimble\/CollectionCount",
  "kind" : "article",
  "role" : "article",
  "title" : "Collection Count",
  "type" : "topic",
  "url" : "\/documentation\/nimble\/collectioncount"
},
"doc://Nimble/documentation/Nimble/CollectionElements": {
  "abstract" : [
    {
      "text" : "Nimble provides a means to check that all elements of a collection pass a given expectation.",
      "type" : "text"
    }
  ],
  "identifier" : "doc:\/\/Nimble\/documentation\/Nimble\/CollectionElements",
  "kind" : "article",
  "role" : "article",
  "title" : "Collection Elements",
  "type" : "topic",
  "url" : "\/documentation\/nimble\/collectionelements"
},
"doc://Nimble/documentation/Nimble/CollectionMembership": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/Nimble\/documentation\/Nimble\/CollectionMembership",
  "kind" : "article",
  "role" : "article",
  "title" : "Collection Membership",
  "type" : "topic",
  "url" : "\/documentation\/nimble\/collectionmembership"
},
"doc://Nimble/documentation/Nimble/Comparisons": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/Nimble\/documentation\/Nimble\/Comparisons",
  "kind" : "article",
  "role" : "article",
  "title" : "Comparisons",
  "type" : "topic",
  "url" : "\/documentation\/nimble\/comparisons"
},
"doc://Nimble/documentation/Nimble/CustomValidation": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/Nimble\/documentation\/Nimble\/CustomValidation",
  "kind" : "article",
  "role" : "article",
  "title" : "Custom Validation",
  "type" : "topic",
  "url" : "\/documentation\/nimble\/customvalidation"
},
"doc://Nimble/documentation/Nimble/Equivalence": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/Nimble\/documentation\/Nimble\/Equivalence",
  "kind" : "article",
  "role" : "article",
  "title" : "Equivalence",
  "type" : "topic",
  "url" : "\/documentation\/nimble\/equivalence"
},
"doc://Nimble/documentation/Nimble/Exceptions": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/Nimble\/documentation\/Nimble\/Exceptions",
  "kind" : "article",
  "role" : "article",
  "title" : "Exceptions",
  "type" : "topic",
  "url" : "\/documentation\/nimble\/exceptions"
},
"doc://Nimble/documentation/Nimble/GroupsOfMatchers": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/Nimble\/documentation\/Nimble\/GroupsOfMatchers",
  "kind" : "article",
  "role" : "article",
  "title" : "Matching a value to any of a group of matchers",
  "type" : "topic",
  "url" : "\/documentation\/nimble\/groupsofmatchers"
},
"doc://Nimble/documentation/Nimble/Identity": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/Nimble\/documentation\/Nimble\/Identity",
  "kind" : "article",
  "role" : "article",
  "title" : "Identity",
  "type" : "topic",
  "url" : "\/documentation\/nimble\/identity"
},
"doc://Nimble/documentation/Nimble/Notifications": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/Nimble\/documentation\/Nimble\/Notifications",
  "kind" : "article",
  "role" : "article",
  "title" : "Notifications",
  "type" : "topic",
  "url" : "\/documentation\/nimble\/notifications"
},
"doc://Nimble/documentation/Nimble/Result": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/Nimble\/documentation\/Nimble\/Result",
  "kind" : "article",
  "role" : "article",
  "title" : "Result",
  "type" : "topic",
  "url" : "\/documentation\/nimble\/result"
},
"doc://Nimble/documentation/Nimble/Strings": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/Nimble\/documentation\/Nimble\/Strings",
  "kind" : "article",
  "role" : "article",
  "title" : "Strings",
  "type" : "topic",
  "url" : "\/documentation\/nimble\/strings"
},
"doc://Nimble/documentation/Nimble/SwiftAssertions": {
  "abstract" : [
    {
      "text" : "If youâ€™re using Swift, you can use the ",
      "type" : "text"
    },
    {
      "code" : "throwAssertion",
      "type" : "codeVoice"
    },
    {
      "text" : " matcher to check if an assertion is thrown (e.g. ",
      "type" : "text"
    },
    {
      "code" : "fatalError()",
      "type" : "codeVoice"
    },
    {
      "text" : "). This is made possible by ",
      "type" : "text"
    },
    {
      "identifier" : "https:\/\/github.com\/mattgallagher",
      "isActive" : true,
      "type" : "reference"
    },
    {
      "text" : "â€™s ",
      "type" : "text"
    },
    {
      "identifier" : "https:\/\/github.com\/mattgallagher\/CwlPreconditionTesting",
      "isActive" : true,
      "type" : "reference"
    },
    {
      "text" : " library.",
      "type" : "text"
    }
  ],
  "identifier" : "doc:\/\/Nimble\/documentation\/Nimble\/SwiftAssertions",
  "kind" : "article",
  "role" : "article",
  "title" : "Swift Assertions",
  "type" : "topic",
  "url" : "\/documentation\/nimble\/swiftassertions"
},
"doc://Nimble/documentation/Nimble/SwiftErrors": {
  "abstract" : [
    {
      "text" : "You can use the ",
      "type" : "text"
    },
    {
      "code" : "throwError",
      "type" : "codeVoice"
    },
    {
      "text" : " matcher to check if an error is thrown.",
      "type" : "text"
    }
  ],
  "identifier" : "doc:\/\/Nimble\/documentation\/Nimble\/SwiftErrors",
  "kind" : "article",
  "role" : "article",
  "title" : "Swift Error Handling",
  "type" : "topic",
  "url" : "\/documentation\/nimble\/swifterrors"
},
"doc://Nimble/documentation/Nimble/Truthiness": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/Nimble\/documentation\/Nimble\/Truthiness",
  "kind" : "article",
  "role" : "article",
  "title" : "Truthiness",
  "type" : "topic",
  "url" : "\/documentation\/nimble\/truthiness"
},
"doc://Nimble/documentation/Nimble/TypeChecking": {
  "abstract" : [
    {
      "text" : "Nimble supports checking the type membership of any kind of object, whether",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "text" : "Objective-C conformant or not.",
      "type" : "text"
    }
  ],
  "identifier" : "doc:\/\/Nimble\/documentation\/Nimble\/TypeChecking",
  "kind" : "article",
  "role" : "article",
  "title" : "Type Checking",
  "type" : "topic",
  "url" : "\/documentation\/nimble\/typechecking"
},
"https://github.com/mattgallagher": {
  "identifier" : "https:\/\/github.com\/mattgallagher",
  "title" : "@mattgallagher",
  "titleInlineContent" : [
    {
      "text" : "@mattgallagher",
      "type" : "text"
    }
  ],
  "type" : "link",
  "url" : "https:\/\/github.com\/mattgallagher"
},
"https://github.com/mattgallagher/CwlPreconditionTesting": {
  "identifier" : "https:\/\/github.com\/mattgallagher\/CwlPreconditionTesting",
  "title" : "CwlPreconditionTesting",
  "titleInlineContent" : [
    {
      "text" : "CwlPreconditionTesting",
      "type" : "text"
    }
  ],
  "type" : "link",
  "url" : "https:\/\/github.com\/mattgallagher\/CwlPreconditionTesting"
}
}
}