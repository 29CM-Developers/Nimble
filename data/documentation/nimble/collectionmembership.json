{
  "hierarchy" : {
    "paths" : [
      [
        "doc:\/\/Nimble\/documentation\/Nimble"
      ]
    ]
  },
  "identifier" : {
    "interfaceLanguage" : "swift",
    "url" : "doc:\/\/Nimble\/documentation\/Nimble\/CollectionMembership"
  },
  "kind" : "article",
  "metadata" : {
    "modules" : [
      {
        "name" : "Nimble"
      }
    ],
    "role" : "article",
    "roleHeading" : "Article",
    "title" : "Collection Membership"
  },
  "primaryContentSections" : [
    {
      "content" : [
        {
          "anchor" : "overview",
          "level" : 2,
          "text" : "Overview",
          "type" : "heading"
        },
        {
          "code" : [
            "\/\/ Swift",
            "",
            "\/\/ Passes if all of the expected values are members of 'actual':",
            "expect(actual).to(contain(expected...))",
            "",
            "\/\/ Passes if 'actual' is empty (i.e. it contains no elements):",
            "expect(actual).to(beEmpty())"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "code" : [
            "\/\/ Objective-C",
            "",
            "\/\/ Passes if expected is a member of 'actual':",
            "expect(actual).to(contain(expected));",
            "",
            "\/\/ Passes if 'actual' is empty (i.e. it contains no elements):",
            "expect(actual).to(beEmpty());"
          ],
          "syntax" : "objc",
          "type" : "codeListing"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "In Swift ",
                  "type" : "text"
                },
                {
                  "code" : "contain",
                  "type" : "codeVoice"
                },
                {
                  "text" : " takes any number of arguments. The expectation",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "passes if all of them are members of the collection. In Objective-C,",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "code" : "contain",
                  "type" : "codeVoice"
                },
                {
                  "text" : " only takes one argument ",
                  "type" : "text"
                },
                {
                  "identifier" : "https:\/\/github.com\/Quick\/Nimble\/issues\/27",
                  "isActive" : true,
                  "type" : "reference"
                },
                {
                  "text" : ".",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Note",
          "style" : "note",
          "type" : "aside"
        },
        {
          "inlineContent" : [
            {
              "text" : "For example, to assert that a list of sea creature names contains",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "“dolphin” and “starfish”:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "\/\/ Swift",
            "",
            "expect([\"whale\", \"dolphin\", \"starfish\"]).to(contain(\"dolphin\", \"starfish\"))"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "code" : [
            "\/\/ Objective-C",
            "",
            "expect(@[@\"whale\", @\"dolphin\", @\"starfish\"]).to(contain(@\"dolphin\"));",
            "expect(@[@\"whale\", @\"dolphin\", @\"starfish\"]).to(contain(@\"starfish\"));"
          ],
          "syntax" : "objc",
          "type" : "codeListing"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "code" : "contain",
                  "type" : "codeVoice"
                },
                {
                  "text" : " and ",
                  "type" : "text"
                },
                {
                  "code" : "beEmpty",
                  "type" : "codeVoice"
                },
                {
                  "text" : " expect collections to be instances of",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "code" : "NSArray",
                  "type" : "codeVoice"
                },
                {
                  "text" : ", ",
                  "type" : "text"
                },
                {
                  "code" : "NSSet",
                  "type" : "codeVoice"
                },
                {
                  "text" : ", or a Swift collection composed of ",
                  "type" : "text"
                },
                {
                  "code" : "Equatable",
                  "type" : "codeVoice"
                },
                {
                  "text" : " elements.",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Note",
          "style" : "note",
          "type" : "aside"
        },
        {
          "inlineContent" : [
            {
              "text" : "To test whether a set of elements is present at the beginning or end of",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "an ordered collection, use ",
              "type" : "text"
            },
            {
              "code" : "beginWith",
              "type" : "codeVoice"
            },
            {
              "text" : " and ",
              "type" : "text"
            },
            {
              "code" : "endWith",
              "type" : "codeVoice"
            },
            {
              "text" : ":",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "\/\/ Swift",
            "",
            "\/\/ Passes if the elements in expected appear at the beginning of 'actual':",
            "expect(actual).to(beginWith(expected...))",
            "",
            "\/\/ Passes if the the elements in expected come at the end of 'actual':",
            "expect(actual).to(endWith(expected...))"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "code" : [
            "\/\/ Objective-C",
            "",
            "\/\/ Passes if the elements in expected appear at the beginning of 'actual':",
            "expect(actual).to(beginWith(expected));",
            "",
            "\/\/ Passes if the the elements in expected come at the end of 'actual':",
            "expect(actual).to(endWith(expected));"
          ],
          "syntax" : "objc",
          "type" : "codeListing"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "code" : "beginWith",
                  "type" : "codeVoice"
                },
                {
                  "text" : " and ",
                  "type" : "text"
                },
                {
                  "code" : "endWith",
                  "type" : "codeVoice"
                },
                {
                  "text" : " expect collections to be instances of",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "code" : "NSArray",
                  "type" : "codeVoice"
                },
                {
                  "text" : ", or ordered Swift collections composed of ",
                  "type" : "text"
                },
                {
                  "code" : "Equatable",
                  "type" : "codeVoice"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "elements.",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Note",
          "style" : "note",
          "type" : "aside"
        },
        {
          "inlineContent" : [
            {
              "text" : "Like ",
              "type" : "text"
            },
            {
              "code" : "contain",
              "type" : "codeVoice"
            },
            {
              "text" : ", in Objective-C ",
              "type" : "text"
            },
            {
              "code" : "beginWith",
              "type" : "codeVoice"
            },
            {
              "text" : " and ",
              "type" : "text"
            },
            {
              "code" : "endWith",
              "type" : "codeVoice"
            },
            {
              "text" : " only support",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "a single argument ",
              "type" : "text"
            },
            {
              "identifier" : "https:\/\/github.com\/Quick\/Nimble\/issues\/27",
              "isActive" : true,
              "overridingTitle" : "for now",
              "overridingTitleInlineContent" : [
                {
                  "text" : "for now",
                  "type" : "text"
                }
              ],
              "type" : "reference"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "For code that returns collections of complex objects without a strict",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "ordering, there is the ",
              "type" : "text"
            },
            {
              "code" : "containElementSatisfying",
              "type" : "codeVoice"
            },
            {
              "text" : " matcher:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "\/\/ Swift",
            "",
            "struct Turtle {",
            "    let color: String",
            "}",
            "",
            "let turtles: [Turtle] = functionThatReturnsSomeTurtlesInAnyOrder()",
            "",
            "\/\/ This set of matchers passes regardless of whether the array is ",
            "\/\/ [{color: \"blue\"}, {color: \"green\"}] or [{color: \"green\"}, {color: \"blue\"}]:",
            "",
            "expect(turtles).to(containElementSatisfying({ turtle in",
            "    return turtle.color == \"green\"",
            "}))",
            "expect(turtles).to(containElementSatisfying({ turtle in",
            "    return turtle.color == \"blue\"",
            "}, \"that is a turtle with color 'blue'\"))",
            "",
            "\/\/ The second matcher will incorporate the provided string in the error message",
            "\/\/ should it fail"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "in Swift, ",
                  "type" : "text"
                },
                {
                  "code" : "containElementSatisfying",
                  "type" : "codeVoice"
                },
                {
                  "text" : " also has a variant that takes in an",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "async function.",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Note",
          "style" : "note",
          "type" : "aside"
        },
        {
          "code" : [
            "\/\/ Objective-C",
            "",
            "@interface Turtle : NSObject",
            "@property (nonatomic, readonly, nonnull) NSString *color;",
            "@end",
            "",
            "@implementation Turtle ",
            "@end",
            "",
            "NSArray<Turtle *> * __nonnull turtles = functionThatReturnsSomeTurtlesInAnyOrder();",
            "",
            "\/\/ This set of matchers passes regardless of whether the array is ",
            "\/\/ [{color: \"blue\"}, {color: \"green\"}] or [{color: \"green\"}, {color: \"blue\"}]:",
            "",
            "expect(turtles).to(containElementSatisfying(^BOOL(id __nonnull object) {",
            "    return [[turtle color] isEqualToString:@\"green\"];",
            "}));",
            "expect(turtles).to(containElementSatisfying(^BOOL(id __nonnull object) {",
            "    return [[turtle color] isEqualToString:@\"blue\"];",
            "}));"
          ],
          "syntax" : "objc",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "For asserting on if the given ",
              "type" : "text"
            },
            {
              "code" : "Comparable",
              "type" : "codeVoice"
            },
            {
              "text" : " value is inside of a ",
              "type" : "text"
            },
            {
              "code" : "Range",
              "type" : "codeVoice"
            },
            {
              "text" : ", use the ",
              "type" : "text"
            },
            {
              "code" : "beWithin",
              "type" : "codeVoice"
            },
            {
              "text" : " matcher.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "\/\/ Swift",
            "",
            "\/\/ Passes if 5 is within the range 1 through 10, inclusive",
            "expect(5).to(beWithin(1...10))",
            "",
            "\/\/ Passes if 5 is not within the range 2 through 4.",
            "expect(5).toNot(beWithin(2..<5))"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        }
      ],
      "kind" : "content"
    }
  ],
  "schemaVersion" : {
    "major" : 0,
    "minor" : 3,
    "patch" : 0
  },
  "sections" : [

  ],
  "seeAlsoSections" : [
    {
      "generated" : true,
      "identifiers" : [
        "doc:\/\/Nimble\/documentation\/Nimble\/TypeChecking",
        "doc:\/\/Nimble\/documentation\/Nimble\/Equivalence",
        "doc:\/\/Nimble\/documentation\/Nimble\/Identity",
        "doc:\/\/Nimble\/documentation\/Nimble\/Comparisons",
        "doc:\/\/Nimble\/documentation\/Nimble\/Truthiness",
        "doc:\/\/Nimble\/documentation\/Nimble\/SwiftAssertions",
        "doc:\/\/Nimble\/documentation\/Nimble\/SwiftErrors",
        "doc:\/\/Nimble\/documentation\/Nimble\/Exceptions",
        "doc:\/\/Nimble\/documentation\/Nimble\/Strings",
        "doc:\/\/Nimble\/documentation\/Nimble\/Notifications",
        "doc:\/\/Nimble\/documentation\/Nimble\/Result",
        "doc:\/\/Nimble\/documentation\/Nimble\/GroupsOfMatchers",
        "doc:\/\/Nimble\/documentation\/Nimble\/CustomValidation",
        "doc:\/\/Nimble\/documentation\/Nimble\/Map",
        "doc:\/\/Nimble\/documentation\/Nimble\/CollectionElements",
        "doc:\/\/Nimble\/documentation\/Nimble\/CollectionCount"
      ],
      "title" : "Matchers"
    }
  ],
  "variants" : [
    {
      "paths" : [
        "\/documentation\/nimble\/collectionmembership"
      ],
      "traits" : [
        {
          "interfaceLanguage" : "swift"
        }
      ]
    }
  ]
, 
"references": {
"doc://Nimble/documentation/Nimble": {
  "abstract" : [
    {
      "inlineContent" : [
        {
          "text" : "Nimble",
          "type" : "text"
        }
      ],
      "type" : "strong"
    },
    {
      "text" : " is a testing framework for verifying the outcomes and Swift or Objective-C expressions.",
      "type" : "text"
    }
  ],
  "identifier" : "doc:\/\/Nimble\/documentation\/Nimble",
  "kind" : "symbol",
  "role" : "collection",
  "title" : "Nimble",
  "type" : "topic",
  "url" : "\/documentation\/nimble"
},
"doc://Nimble/documentation/Nimble/CollectionCount": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/Nimble\/documentation\/Nimble\/CollectionCount",
  "kind" : "article",
  "role" : "article",
  "title" : "Collection Count",
  "type" : "topic",
  "url" : "\/documentation\/nimble\/collectioncount"
},
"doc://Nimble/documentation/Nimble/CollectionElements": {
  "abstract" : [
    {
      "text" : "Nimble provides a means to check that all elements of a collection pass a given expectation.",
      "type" : "text"
    }
  ],
  "identifier" : "doc:\/\/Nimble\/documentation\/Nimble\/CollectionElements",
  "kind" : "article",
  "role" : "article",
  "title" : "Collection Elements",
  "type" : "topic",
  "url" : "\/documentation\/nimble\/collectionelements"
},
"doc://Nimble/documentation/Nimble/Comparisons": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/Nimble\/documentation\/Nimble\/Comparisons",
  "kind" : "article",
  "role" : "article",
  "title" : "Comparisons",
  "type" : "topic",
  "url" : "\/documentation\/nimble\/comparisons"
},
"doc://Nimble/documentation/Nimble/CustomValidation": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/Nimble\/documentation\/Nimble\/CustomValidation",
  "kind" : "article",
  "role" : "article",
  "title" : "Custom Validation",
  "type" : "topic",
  "url" : "\/documentation\/nimble\/customvalidation"
},
"doc://Nimble/documentation/Nimble/Equivalence": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/Nimble\/documentation\/Nimble\/Equivalence",
  "kind" : "article",
  "role" : "article",
  "title" : "Equivalence",
  "type" : "topic",
  "url" : "\/documentation\/nimble\/equivalence"
},
"doc://Nimble/documentation/Nimble/Exceptions": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/Nimble\/documentation\/Nimble\/Exceptions",
  "kind" : "article",
  "role" : "article",
  "title" : "Exceptions",
  "type" : "topic",
  "url" : "\/documentation\/nimble\/exceptions"
},
"doc://Nimble/documentation/Nimble/GroupsOfMatchers": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/Nimble\/documentation\/Nimble\/GroupsOfMatchers",
  "kind" : "article",
  "role" : "article",
  "title" : "Matching a value to any of a group of matchers",
  "type" : "topic",
  "url" : "\/documentation\/nimble\/groupsofmatchers"
},
"doc://Nimble/documentation/Nimble/Identity": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/Nimble\/documentation\/Nimble\/Identity",
  "kind" : "article",
  "role" : "article",
  "title" : "Identity",
  "type" : "topic",
  "url" : "\/documentation\/nimble\/identity"
},
"doc://Nimble/documentation/Nimble/Map": {
  "abstract" : [
    {
      "text" : "Sometimes, you only want to match against a property or group of properties.",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "text" : "For example, if you wanted to check that only one or a few properties of a value",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "text" : "are equal to something else. For this, use the ",
      "type" : "text"
    },
    {
      "code" : "map",
      "type" : "codeVoice"
    },
    {
      "text" : " matcher to convert a value",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "text" : "to another value and check it with a matcher.",
      "type" : "text"
    }
  ],
  "identifier" : "doc:\/\/Nimble\/documentation\/Nimble\/Map",
  "kind" : "article",
  "role" : "article",
  "title" : "Mapping a Value to Another Value",
  "type" : "topic",
  "url" : "\/documentation\/nimble\/map"
},
"doc://Nimble/documentation/Nimble/Notifications": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/Nimble\/documentation\/Nimble\/Notifications",
  "kind" : "article",
  "role" : "article",
  "title" : "Notifications",
  "type" : "topic",
  "url" : "\/documentation\/nimble\/notifications"
},
"doc://Nimble/documentation/Nimble/Result": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/Nimble\/documentation\/Nimble\/Result",
  "kind" : "article",
  "role" : "article",
  "title" : "Result",
  "type" : "topic",
  "url" : "\/documentation\/nimble\/result"
},
"doc://Nimble/documentation/Nimble/Strings": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/Nimble\/documentation\/Nimble\/Strings",
  "kind" : "article",
  "role" : "article",
  "title" : "Strings",
  "type" : "topic",
  "url" : "\/documentation\/nimble\/strings"
},
"doc://Nimble/documentation/Nimble/SwiftAssertions": {
  "abstract" : [
    {
      "text" : "If you’re using Swift, you can use the ",
      "type" : "text"
    },
    {
      "code" : "throwAssertion",
      "type" : "codeVoice"
    },
    {
      "text" : " matcher to check if an assertion is thrown (e.g. ",
      "type" : "text"
    },
    {
      "code" : "fatalError()",
      "type" : "codeVoice"
    },
    {
      "text" : "). This is made possible by ",
      "type" : "text"
    },
    {
      "identifier" : "https:\/\/github.com\/mattgallagher",
      "isActive" : true,
      "type" : "reference"
    },
    {
      "text" : "’s ",
      "type" : "text"
    },
    {
      "identifier" : "https:\/\/github.com\/mattgallagher\/CwlPreconditionTesting",
      "isActive" : true,
      "type" : "reference"
    },
    {
      "text" : " library.",
      "type" : "text"
    }
  ],
  "identifier" : "doc:\/\/Nimble\/documentation\/Nimble\/SwiftAssertions",
  "kind" : "article",
  "role" : "article",
  "title" : "Swift Assertions",
  "type" : "topic",
  "url" : "\/documentation\/nimble\/swiftassertions"
},
"doc://Nimble/documentation/Nimble/SwiftErrors": {
  "abstract" : [
    {
      "text" : "You can use the ",
      "type" : "text"
    },
    {
      "code" : "throwError",
      "type" : "codeVoice"
    },
    {
      "text" : " matcher to check if an error is thrown.",
      "type" : "text"
    }
  ],
  "identifier" : "doc:\/\/Nimble\/documentation\/Nimble\/SwiftErrors",
  "kind" : "article",
  "role" : "article",
  "title" : "Swift Error Handling",
  "type" : "topic",
  "url" : "\/documentation\/nimble\/swifterrors"
},
"doc://Nimble/documentation/Nimble/Truthiness": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/Nimble\/documentation\/Nimble\/Truthiness",
  "kind" : "article",
  "role" : "article",
  "title" : "Truthiness",
  "type" : "topic",
  "url" : "\/documentation\/nimble\/truthiness"
},
"doc://Nimble/documentation/Nimble/TypeChecking": {
  "abstract" : [
    {
      "text" : "Nimble supports checking the type membership of any kind of object, whether",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "text" : "Objective-C conformant or not.",
      "type" : "text"
    }
  ],
  "identifier" : "doc:\/\/Nimble\/documentation\/Nimble\/TypeChecking",
  "kind" : "article",
  "role" : "article",
  "title" : "Type Checking",
  "type" : "topic",
  "url" : "\/documentation\/nimble\/typechecking"
},
"https://github.com/Quick/Nimble/issues/27": {
  "identifier" : "https:\/\/github.com\/Quick\/Nimble\/issues\/27",
  "title" : "for now",
  "titleInlineContent" : [
    {
      "text" : "for now",
      "type" : "text"
    }
  ],
  "type" : "link",
  "url" : "https:\/\/github.com\/Quick\/Nimble\/issues\/27"
},
"https://github.com/mattgallagher": {
  "identifier" : "https:\/\/github.com\/mattgallagher",
  "title" : "@mattgallagher",
  "titleInlineContent" : [
    {
      "text" : "@mattgallagher",
      "type" : "text"
    }
  ],
  "type" : "link",
  "url" : "https:\/\/github.com\/mattgallagher"
},
"https://github.com/mattgallagher/CwlPreconditionTesting": {
  "identifier" : "https:\/\/github.com\/mattgallagher\/CwlPreconditionTesting",
  "title" : "CwlPreconditionTesting",
  "titleInlineContent" : [
    {
      "text" : "CwlPreconditionTesting",
      "type" : "text"
    }
  ],
  "type" : "link",
  "url" : "https:\/\/github.com\/mattgallagher\/CwlPreconditionTesting"
}
}
}